class WalkIntoStore:

    title = "walk into store"
    steps = 9

    def stepE(self):
        return "stop for red lights and stop signs"

    def stepC(self):
        return "shut car door and press lock button"

    def stepH(self):
        return "get in car and go to store"

    def stepG(self):
        return "pull into store driveway"

    def stepA(self):
        return "park the car"

    def stepB(self):
        return "take the key out of the ignition"

    def stepD(self):
        return "get out of the car"

    def stepI(self):
        return "walk into store"

    def stepF(self):
        return "push gas pedal to move vehicle"

    #Let's think about a narrative to link aforementioned events in the correct temporal order.
    def get_narrative(self):
        return "This is a story about walking into a store. It all starts when someone decides to get in their car and go to the store. They push the gas pedal to move the vehicle, making sure to stop for red lights and stop signs along the way. After driving carefully, they pull into the store's driveway. Once there, they park the car and take the key out of the ignition. Next, they get out of the car, shut the car door, and press the lock button to ensure it's secure. Finally, they walk into the store. By adhering to the provided temporal information, the desired goal is achieved."

    def get_relations(self):
        return [
            "stepF -> stepE",
            "stepE -> stepG",
            "stepG -> stepA",
            "stepB -> stepD",
            "stepA -> stepB",
            "stepD -> stepC",
            "stepC -> stepI",
            "stepH -> stepF",
        ]
# END

class PickOutItems:

    title = "pick out items"
    steps = 7

    def stepG(self):
        return "pick out items"

    def stepC(self):
        return "visually locate needed item"

    def stepD(self):
        return "walk down necessary isle"

    def stepE(self):
        return "walk toward necessary isle"

    def stepA(self):
        return "locate sign indicating which isle has items"

    def stepF(self):
        return "drive to the store after work"

    def stepB(self):
        return "find needed item"

    #Let's think about a narrative to link aforementioned events in the correct temporal order.
    def get_narrative(self):
        return "This is a story about picking out items. After a long day at work, the first thing that needed to be done was to drive to the store. Upon arriving, it was important to locate the sign indicating which aisle had the items needed. Once the sign was spotted, the next step was to walk toward the necessary aisle. Getting closer, walking down the aisle was the next task to ensure nothing was missed. To find the needed item, visually locating it on the shelves was crucial. After spotting the item, it was picked out with a sense of accomplishment. By adhering to the provided temporal information, the desired goal is achieved."

    def get_relations(self):
        return [
            "stepA -> stepE",
            "stepE -> stepD",
            "stepD -> stepC",
            "stepC -> stepB",
            "stepB -> stepG",
            "stepF -> stepA",
        ]
# END

class GoOutsideInAnOpenArea:

    title = "Go outside in an open area"
    steps = 7

    def stepG(self):
        return "Go outside in an open area"

    def stepB(self):
        return "push door open"

    def stepD(self):
        return "walk body through door"

    def stepF(self):
        return "get dressed in warm clothes"

    def stepC(self):
        return "reach towards door handle"

    def stepA(self):
        return "walk to house door"

    def stepE(self):
        return "grip handle with hand"

    #Let's think about a narrative to link aforementioned events in the correct temporal order.
    def get_narrative(self):
        return "This is a story about going outside in an open area. On a chilly morning, the first thing done was getting dressed in warm clothes to prepare for the cold outside. After being fully dressed, the journey to the house door began. Upon reaching the door, there was a reach towards the door handle, ensuring a firm grip on it. With a firm grip established, the door was pushed open, allowing passage through it. Walking through the door was the next step, marking the departure from the inside of the house. Finally, stepping outside into the open area was achieved, feeling the fresh air and the warmth of the morning sun. By adhering to the provided temporal information, the desired goal is achieved."

    def get_relations(self):
        return [
            "stepA -> stepC",
            "stepC -> stepE",
            "stepE -> stepB",
            "stepB -> stepD",
            "stepD -> stepG",
            "stepF -> stepA",
        ]
# END

class PutKeyFobAwayInPocket:

    title = "put key fob away in pocket"
    steps = 7

    def stepA(self):
        return "move key towards pocket"

    def stepG(self):
        return "put key fob away in pocket"

    def stepE(self):
        return "open the pocket"

    def stepC(self):
        return "release hand from key"

    def stepF(self):
        return "release unlock button"

    def stepB(self):
        return "move key inside pocket"

    def stepD(self):
        return "find the pocket"

    #Let's think about a narrative to link aforementioned events in the correct temporal order.
    def get_narrative(self):
        return "This is a story about putting a key fob away in a pocket. First, after releasing the unlock button, the person finds the pocket. Knowing where the pocket is, they then open it to make sure the key can be placed inside. At the same time, they move the key towards the pocket. Once the pocket is open and the key is close enough, they move the key inside the pocket. After the key is securely inside, they release their hand from the key, completing the action by putting the key fob away in the pocket. By adhering to the provided temporal information, the desired goal is achieved."

    def get_relations(self):
        return [
            "stepD -> stepE",
            "stepD -> stepA",
            "stepA -> stepB",
            "stepE -> stepB",
            "stepB -> stepC",
            "stepC -> stepG",
            "stepF -> stepD",
        ]
# END

class RideAnElephant:

    title = "ride an elephant"
    steps = 7

    def stepF(self):
        return "decided to ride an elephant"

    def stepB(self):
        return "Get help onto the elephant"

    def stepE(self):
        return "Search for locations where elephants can be ridden"

    def stepD(self):
        return "Make a reservation online"

    def stepA(self):
        return "Go online via a computer or phone"

    def stepC(self):
        return "Show up to reservation"

    def stepG(self):
        return "ride an elephant"

    #Let's think about a narrative to link aforementioned events in the correct temporal order.
    def get_narrative(self):
        return "This is a story about riding an elephant. It all started when someone decided to ride an elephant. To make this dream come true, they first went online via a computer or phone. After getting online, they searched for locations where elephants can be ridden. Finding a suitable place, they made a reservation online. When the day came, they showed up to their reservation and got help onto the elephant. Finally, the moment they had been waiting for arrived, and they rode the elephant, feeling the gentle sway and the strength of the magnificent creature beneath them. By adhering to the provided temporal information, the desired goal is achieved."

    def get_relations(self):
        return [
            "stepA -> stepE",
            "stepE -> stepD",
            "stepD -> stepC",
            "stepC -> stepB",
            "stepB -> stepG",
            "stepF -> stepA",
        ]
# END

class UnlockBottomLock:

    title = "unlock bottom lock"
    steps = 7

    def stepE(self):
        return "stick key in bottom lock"

    def stepC(self):
        return "look at keyring"

    def stepG(self):
        return "unlock bottom lock"

    def stepF(self):
        return "unlock top lock"

    def stepB(self):
        return "select key for bottom lock"

    def stepA(self):
        return "turn key counter clockwise"

    def stepD(self):
        return "pull key out of top lock"

    #Let's think about a narrative to link aforementioned events in the correct temporal order.
    def get_narrative(self):
        return "This is a story about unlocking the bottom lock. First, the key was pulled out of the top lock, indicating that something was already unlocked. Then, a look at the keyring was taken to find the right key for the next task. After finding the correct key for the bottom lock, it was time to stick the key in the bottom lock. But before the bottom lock could be unlocked, the key had to be turned counter-clockwise. Only after turning the key could the bottom lock finally be unlocked. Interestingly, unlocking the top lock happened before the key was pulled out, showing that both locks needed attention for the task to be completed. By adhering to the provided temporal information, the desired goal is achieved."

    def get_relations(self):
        return [
            "stepD -> stepC",
            "stepC -> stepB",
            "stepA -> stepG",
            "stepB -> stepE",
            "stepE -> stepA",
            "stepF -> stepD",
        ]
# END

class SitInTheFrontSeatOfTheCar:

    title = "sit in the front seat of the car"
    steps = 7

    def stepC(self):
        return "open the car door"

    def stepD(self):
        return "walk out of the house"

    def stepB(self):
        return "put clothes on"

    def stepG(self):
        return "sit in the front seat of the car"

    def stepF(self):
        return "decided to sit in the front seat of the car"

    def stepE(self):
        return "take a shower"

    def stepA(self):
        return "unlock the car door"

    #Let's think about a narrative to link aforementioned events in the correct temporal order.
    def get_narrative(self):
        return "This is a story about sitting in the front seat of the car. It all started when the decision was made to sit in the front seat. Before anything else, a shower was taken to be fresh and clean. After feeling refreshed, clothes were put on to be presentable for the day ahead. Once dressed, it was time to walk out of the house, but not before making sure the car door could be opened by unlocking it. With the car door unlocked, it was then opened with a sense of anticipation. Finally, the moment had arrived to sit in the front seat of the car, marking the completion of the journey from a simple decision to the act itself. By adhering to the provided temporal information, the desired goal is achieved."

    def get_relations(self):
        return [
            "stepB -> stepD",
            "stepE -> stepB",
            "stepD -> stepA",
            "stepA -> stepC",
            "stepC -> stepG",
            "stepF -> stepE",
        ]
# END

class AssembleTacosAsDesired:

    title = "assemble tacos as desired"
    steps = 7

    def stepB(self):
        return "Chop up vegetables"

    def stepC(self):
        return "Remove taco shells from package"

    def stepE(self):
        return "Place cheese on meat"

    def stepD(self):
        return "Place vegetables on cheese"

    def stepA(self):
        return "Place meat into taco shells"

    def stepG(self):
        return "assemble tacos as desired"

    def stepF(self):
        return "cook desired meat(s)"

    #Let's think about a narrative to link aforementioned events in the correct temporal order.
    def get_narrative(self):
        return "This is a story about assembling tacos as desired. It all starts when someone decides to cook their favorite meat(s), which is the very first step in this delicious adventure. Once the meat is cooking, they begin to chop up the vegetables, preparing them for the tacos. With the vegetables ready, they then remove the taco shells from the package, setting the stage for the assembly. The cooked meat is placed into the taco shells, followed by a generous layer of cheese on top of the meat to melt slightly. Next, the chopped vegetables are placed on the cheese, adding crunch and freshness. Finally, the tacos are assembled as desired, creating a delightful meal. By adhering to the provided temporal information, the desired goal is achieved."

    def get_relations(self):
        return [
            "stepC -> stepA",
            "stepB -> stepC",
            "stepE -> stepD",
            "stepD -> stepG",
            "stepA -> stepE",
            "stepF -> stepB",
        ]
# END

class PutAwayPlasterKit:

    title = "put away plaster kit"
    steps = 7

    def stepC(self):
        return "make sure job is done"

    def stepE(self):
        return "find excess materials"

    def stepF(self):
        return "clean up the mess on the floor"

    def stepG(self):
        return "put away plaster kit"

    def stepA(self):
        return "gather up trash"

    def stepB(self):
        return "close the plaster kit"

    def stepD(self):
        return "look at wall"

    #Let's think about a narrative to link aforementioned events in the correct temporal order.
    def get_narrative(self):
        return "This is a story about putting away a plaster kit. After finishing a fun day of crafting, it was time to clean up. First, the mess on the floor was cleaned up, ensuring that no traces of the day's activities were left behind. While cleaning, various tasks were undertaken simultaneously: gathering up trash, looking at the wall to admire the work done, finding excess materials that could be used next time, and closing the plaster kit to keep everything secure. Once the floor was spotless, it was easier to find the excess materials and make sure nothing useful was thrown away. After admiring the wall and feeling satisfied with the job done, the final step was to put away the plaster kit, neatly storing it until next time. By adhering to the provided temporal information, the desired goal is achieved."

    def get_relations(self):
        return [
            "stepE -> stepG",
            "stepD -> stepC",
            "stepC -> stepG",
            "stepB -> stepG",
            "stepA -> stepG",
            "stepF -> stepE",
            "stepF -> stepD",
            "stepF -> stepB",
            "stepF -> stepA",
        ]
# END

class GetInformationOnTheClubFromFriend:

    title = "Get information on the club from friend"
    steps = 7

    def stepF(self):
        return "decided to Get information on the club from friend"

    def stepD(self):
        return "Start talking about clubs"

    def stepG(self):
        return "Get information on the club from friend"

    def stepB(self):
        return "Wait for friend to pick up"

    def stepC(self):
        return "Get the name of a club from friend"

    def stepA(self):
        return "Call a friend"

    def stepE(self):
        return "Have some small talk"

    #Let's think about a narrative to link aforementioned events in the correct temporal order.
    def get_narrative(self):
        return "This is a story about getting information on the club from a friend. One day, someone decided to get information on the club from a friend. So, they called their friend. They had to wait for their friend to pick up the phone. Once the friend picked up, they started with some small talk and also began talking about clubs. After chatting for a bit, they got the name of a club from their friend. Finally, they got all the information they needed about the club from their friend. By adhering to the provided temporal information, the desired goal is achieved."

    def get_relations(self):
        return [
            "stepA -> stepB",
            "stepB -> stepE",
            "stepB -> stepD",
            "stepE -> stepC",
            "stepD -> stepC",
            "stepC -> stepG",
            "stepF -> stepA",
        ]
# END

class DoSomethingExciting:

    title = "do something exciting"
    steps = 7

    def stepG(self):
        return "do something exciting"

    def stepF(self):
        return "decided to do something exciting"

    def stepB(self):
        return "enter the place"

    def stepD(self):
        return "go online to book trip"

    def stepA(self):
        return "Think of what want to do"

    def stepC(self):
        return "book the experience online"

    def stepE(self):
        return "go to the destination"

    #Let's think about a narrative to link aforementioned events in the correct temporal order.
    def get_narrative(self):
        return "This is a story about doing something exciting. It all began when someone decided to do something exciting. They started by thinking about what they wanted to do. After some thought, they went online to book a trip, which was the next step in making their exciting idea a reality. Once the experience was booked online, the next phase was to go to the destination. Upon arrival, they entered the place where the exciting activity would happen. Finally, they did something exciting, just as they had planned. By adhering to the provided temporal information, the desired goal is achieved."

    def get_relations(self):
        return [
            "stepA -> stepD",
            "stepD -> stepC",
            "stepC -> stepE",
            "stepE -> stepB",
            "stepB -> stepG",
            "stepF -> stepA",
        ]
# END

class PickOutAWorkoutPlan:

    title = "pick out a workout plan"
    steps = 7

    def stepD(self):
        return "make a list of cons for the plan"

    def stepB(self):
        return "decide if the plan is suitable"

    def stepF(self):
        return "find a workout plan"

    def stepC(self):
        return "make a list of pros for the plan"

    def stepG(self):
        return "pick out a workout plan"

    def stepA(self):
        return "compare the plan to other available plans"

    def stepE(self):
        return "see if the pros outweigh the cons"

    #Let's think about a narrative to link aforementioned events in the correct temporal order.
    def get_narrative(self):
        return "This is a story about picking out a workout plan. It all started when someone decided they needed to find a workout plan. After finding one, they made a list of pros for the plan and also made a list of cons. They compared the plan to other available plans to see which one might be the best fit. Then, they carefully considered if the pros outweighed the cons. This was an important step because it helped them decide if the plan was suitable for their needs and goals. Finally, after going through all these thoughtful steps, they picked out a workout plan. By adhering to the provided temporal information, the desired goal is achieved."

    def get_relations(self):
        return [
            "stepA -> stepB",
            "stepC -> stepE",
            "stepB -> stepG",
            "stepD -> stepE",
            "stepE -> stepB",
            "stepF -> stepA",
            "stepF -> stepC",
            "stepF -> stepD",
        ]
# END

class ConnectPhoneToTheWifi:

    title = "connect phone to the wifi"
    steps = 7

    def stepB(self):
        return "type in password"

    def stepD(self):
        return "locate settings app"

    def stepE(self):
        return "open connections tab"

    def stepA(self):
        return "open settings app"

    def stepC(self):
        return "find wifi network"

    def stepG(self):
        return "connect phone to the wifi"

    def stepF(self):
        return "unlock the phone screen"

    #Let's think about a narrative to link aforementioned events in the correct temporal order.
    def get_narrative(self):
        return "This is a story about how to connect a phone to the wifi. First, you need to unlock the phone screen. Once the screen is unlocked, you locate the settings app. After finding the settings app, you open it and then open the connections tab. In the connections tab, you find the wifi network you want to connect to. After finding the right network, you type in the password for the wifi. Finally, you connect the phone to the wifi. By adhering to the provided temporal information, the desired goal is achieved."

    def get_relations(self):
        return [
            "stepD -> stepA",
            "stepA -> stepE",
            "stepE -> stepC",
            "stepC -> stepB",
            "stepB -> stepG",
            "stepF -> stepD",
        ]
# END

class PracticeTurningBodyOverAndLandingOnFeet:

    title = "practice turning body over and landing on feet"
    steps = 7

    def stepA(self):
        return "place protective mats down"

    def stepF(self):
        return "practice putting hands on the ground and shifting weight"

    def stepE(self):
        return "practice for exercise"

    def stepC(self):
        return "stretch for exercise"

    def stepD(self):
        return "find cleared area in field"

    def stepG(self):
        return "practice turning body over and landing on feet"

    def stepB(self):
        return "remove any jewelry"

    #Let's think about a narrative to link aforementioned events in the correct temporal order.
    def get_narrative(self):
        return "This is a story about practicing turning the body over and landing on feet. One sunny day, a group of friends decided to learn a new skill in a spacious field. First, they found a cleared area in the field to ensure they had enough space. Knowing safety is important, they placed protective mats down on the ground. They also remembered to remove any jewelry to prevent any injuries. Before starting their practice, they stretched for exercise to warm up their muscles and prevent any strains. After warming up, they practiced putting their hands on the ground and shifting their weight, a crucial step before the main activity. Finally, they practiced turning their bodies over and landing on their feet, feeling a sense of achievement with each successful attempt. By adhering to the provided temporal information, the desired goal is achieved."

    def get_relations(self):
        return [
            "stepD -> stepB",
            "stepD -> stepA",
            "stepA -> stepC",
            "stepB -> stepC",
            "stepC -> stepE",
            "stepE -> stepG",
            "stepF -> stepD",
        ]
# END

class LearnANewSongToSing:

    title = "learn a new song to sing"
    steps = 8

    def stepE(self):
        return "listen to several songs"

    def stepB(self):
        return "listen to the song several times"

    def stepF(self):
        return "look up the lyrics"

    def stepH(self):
        return "learn a new song to sing"

    def stepG(self):
        return "decided to learn a new song to sing"

    def stepD(self):
        return "look up the chords"

    def stepC(self):
        return "practice singing the song"

    def stepA(self):
        return "pick out a catchy song"

    #Let's think about a narrative to link aforementioned events in the correct temporal order.
    def get_narrative(self):
        return "This is a story about learning a new song to sing. It all started when someone decided to learn a new song to sing. To begin, they listened to several songs until they picked out a catchy one that caught their ear. After choosing the song, they listened to it several times to get a feel for the melody and rhythm. They also looked up the lyrics to understand what the song was about and searched for the chords so they could play along. With all this information, they began to practice singing the song, combining the lyrics, melody, and chords. After much practice, they finally learned the new song to sing. By adhering to the provided temporal information, the desired goal is achieved."

    def get_relations(self):
        return [
            "stepE -> stepA",
            "stepA -> stepF",
            "stepA -> stepD",
            "stepA -> stepB",
            "stepF -> stepC",
            "stepD -> stepC",
            "stepB -> stepC",
            "stepC -> stepH",
            "stepG -> stepE",
        ]

# END

